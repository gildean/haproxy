{
  "name": "haproxy",
  "version": "0.0.4",
  "description": "HAProxy management and orchestration module",
  "main": "index.js",
  "dependencies": {
    "dsv": "0.0.x",
    "which": "~1.0.5",
    "mkdirp": "~0.3.5"
  },
  "devDependencies": {
    "pre-commit": "0.0.x",
    "mocha": "1.9.x",
    "sinon": "1.6.x",
    "sinon-chai": "2.3.x",
    "chai": "1.5.x",
    "request": "~2.20.0"
  },
  "scripts": {
    "test": "NODE_ENV=testing ./node_modules/.bin/mocha $(find test -name '*.test.js')"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:observing/haproxy.git"
  },
  "keywords": [
    "HAProxy",
    "proxy",
    "load balancer",
    "orchestration",
    "cloud",
    "reverse",
    "load",
    "balancer"
  ],
  "author": {
    "name": "Arnout Kazemier",
    "email": "opensource@observe.it"
  },
  "license": "MIT",
  "readme": "```\nHere be deamons, this module is still under heavy development not all parsers\nare hooked up on the API's yet. Feel free to contribute and build the best\nHAProxy orchestration module out there.\n```\n\n[![Build Status](https://travis-ci.org/observing/haproxy.png?branch=master)](https://travis-ci.org/observing/haproxy)\n\n# haproxy\n\nHAProxy is an amazing proxy, it has support for many different algorithms for\nload balancing, it can handle HTTP, TCP, WebSocket connects, does SSL\ntermination and much much more. But managing these proxies can be a bit of\na pain. That's where `haproxy` comes in, it provides a access to the stat socket\nof HAProxy which allows you to enable, disable servers and front-ends, read out\nstats and much more. In addition to that it's also capable of hot reloading\nconfiguration changes and starting, stopping your HAProxy, even when it's\nrunning as a daemon.\n\n## Installation\n\nThe package is released in `npm`, the Node.js package registry:\n\n```\nnpm install haproxy --save\n```\n\n## Testing\n\nTests can be executed after installation by running `npm test`. For test to run\nproperly *Haproxy 1.5dev18* or greater is required. See commands below:\n\n```\nsudo apt-get install -qq build-essential libssl-dev libev-dev\nwget http://haproxy.1wt.eu/download/1.5/src/devel/haproxy-1.5-dev18.tar.gz\ntar xzvf haproxy-1.5-dev18.tar.gz\ncd haproxy-1.5-dev18\nmake TARGET=linux26 USE_OPENSSL=1\nsudo make install\n\nnpm test\n```\n\n## haproxy.cfg\n\nIn order to make your HAProxy installation work with this module you need to\nexpose the `stats socket` interface of HAProxy. If you don't have this specified\nin your configuration please add the following to the `global` section of your\nconfiguration.\n\n```\nglobal\n  # Exposes the stat socket so we can manage the proxy through node.js\n  stats socket /tmp/haproxy.sock level admin\n```\n\nReload you configuration to make this change active and you should be ready to\nrock.\n\n# API\n\n```js\n'use strict';\n\nvar HAProxy = require('haproxy');\n\nvar haproxy = new HAProxy('/optional/socket/path.sock', { /* options */ });\n```\n\nAn alternate interface is:\n\n```js\nvar haproxy = new HAProxy({ socket: 'path' /*, the rest of the options */});\n```\n\nI personally prefer the first interface as a correct socket path is required for\na functioning module. The options are not required, but the following options\nare supported:\n\n- `pid`: The process id\n- `pidFile`: The location of the pid file\n- `config`: The location of the configuration file\n- `discover`: Tries to find your HAProxy instance if you don't know the pid\n- `socket`: The location of the unix socket\n- [optional] `which`: The location of the HAProxy\n- [optional] `prefix`: Prefixes the HAProxy commands. Useful for `sudo`\n\nThere's a lot of freedom in this module, callbacks are always optional so you\ncan do fire and forget management as well as how you add the callbacks.\n\n```js\nhaproxy.method('value', function () { .. });\n\n//\n// Is the same as\n//\n\nhaproxy.method('value').call(function () { .. });\n```\n\nIt also supports a chaining API:\n\n```js\nhaproxy.method().and.method2('value').and.method3('value', function () {\n  // woop woop\n});\n\n//\n// The example above will call method() and method() as fire and forget and\n// method3() is called with a callback. It doesn't maintain order so it could be\n// that method() is called after method3() as it could take longer to complete.\n//\n```\n\nThe following methods are available:\n\n### HAProxy.start(fn)\n\nStart a new HAProxy instance with the given configuration. It will verify the\nconfiguration before it attempts to start HAProxy. The process will\nautomatically be daemonized and the pidFile will be stored in the supplied\npidFile location or default to `/var/run/haproxy.pid`.\n\nPlease note that it does not check if there are any HAProxy processes running.\n\n```js\nhaproxy.start(function (err) {\n  .. yay it's started ..\n});\n```\n\n### HAProxy.stop([all], fn)\n\nStops the currently running HAProxy process, even if it's not started using\n`HAProxy.start` it will find the process using the supplied pidFile argument or\nscans the process list for a running process.\n\nWhen the `all` boolean is supplied it will kill all running HAProxy processes\ninstead of the first one it found.\n\n```js\nhaproxy.stop(function (err) {\n .. the proxy is stopped ..\n});\n```\n\n### HAProxy.softstop(fn)\n\nThis executes a softstop on all running HAProxy installations. So instead of\ntermining all active connections it will wait for them to finish and then, kill\nthe process.\n\n```js\nhaproxy.softstop(function (err) {\n  .. wheee ..\n});\n```\n\n### HAProxy.reload([hard], fn)\n\nHot reload the configuration with the minimal amount of downtime. If the `hard`\nboolean is given it will terminate the process forcefully and kill all active\nconnections.\n\nBefore it reloads it will again, verify the configuration so we don't create any\nbroken mess.\n\n```js\nhaproxy.reload(function (err) {\n  .. the proxy has reloaded ..\n});\n```\n\n### HAProxy.verify(fn)\n\nVerify the given configuration to see if it's all in working order.\n\n```js\nHAProxy.verify(function (err, working) {\n .. failed to do things ..\n if (working) .. yay configuration is working ..\n});\n```\n\n### HAProxy.running(fn)\n\nScans the system for running HAProxy instances. It's mostly used internally but\nit might be useful for you as well.\n\n```js\nHAProxy.running(function (err, running) {\n  if (running) .. yup, process running .. \n});\n```\n\n### HAProxy.clear([all], fn)\n\nClear the max values of the statistic counts in the proxy for each front-end and\nbackend. When the `all` boolean is supplied it will clean all the stats. This\nhas the same effect as restarting.\n\n```js\nhaproxy.clear(function (err) {\n  // stats cleared\n})\n```\n\n### HAProxy.disable(backend, server, fn)\n\nMark the given server a down for maintenance, in this mode no checks will be\npreformed on the server until it leaves maintenance.\n\n```js\nhaproxy.disable('realtime', 'server1', function (err) {\n  // server out of the pool\n});\n```\n\n### HAProxy.enable(backend, server, fn)\n\nIf the server was previously marked as down for maintenance, it will mark the\nserver as up again and all checks will be re-enabled.\n\n```js\nhaproxy.enable('realtime', 'server1', function (err) {\n  // server enabled again\n});\n```\n\n### HAProxy.pause(frontend, fn)\n\nMark the frontend as temporarily stopped. This corresponds to the mode which is\nused during a softrestart. The frontend releases the port it was bound on but it\ncan be enabled again when needed.\n\n```js\nhaproxy.pause('frontend', function (err) {\n  // disable the frontend\n});\n```\n\n### HAProxy.resume(frontend, fn)\n\nResume the front-end that you previously paused.\n\n```js\nhaproxy.resume('frontend', function (err) {\n  // enable the frontend\n});\n```\n\n### HAProxy.errors([id], fn)\n\nShow the server errors or the errors for the given session id. The session id is\noptional.\n\n```js\nhaproxy.errors(function (err, errors) {\n  console.log(errors);\n});\n```\n\n### HAProxy.weight(backend, server, [weight], fn)\n\nGet the assigned weight for the server from the given backend.\n\n```js\nhaproxy.weight('backend', 'server1', function (err, weight) {\n  console.log(weight);\n});\n```\n\nIf the `weight` argument is set, it will automatically set the weight for this\nserver:\n\n```js\nhaproxy.weight('backend', 'server1', 10, function (err) {\n// woop\n});\n```\n\nPlease note that the weight should be between 0 and 255\n\n### HAProxy.maxconn([frontend], max, fn)\n\nUpdate the maxconnection setting for the frontend.\n\n```js\nhaproxy.maconn('public', 809809, function (err) {\n  // handle failures.\n});\n```\n\nIf no frontend is supplied it will apply this configuration globally\n\n```js\nhaproxy.maconn(809809, function (err) {\n  // handle failures.\n});\n```\n\n### HAProxy.ratelimit(24242, fn)\n\nChange the process-wide rate limit. Setting this value to 0 will disable the\nrate-limitter.\n\n```js\nhaproxy.connections(4242, function (err) {\n  // handle errors ._.\n});\n```\n\n### HAProxy.compression(2, fn)\n\nChange the maximum input compression rate.\n\n```js\nhaproxy.compression(3, function (err) {\n  // oh noes. error handling, but this is optional, if you don't care about\n  // errors\n});\n```\n\n### HAProxy.info(fn)\n\nRetrieve some information about the HAProxy\n\n```js\nhaproxy.info(function (err, info) {\n  // do something with the info..\n});\n```\n\n### HAProxy.session([id], fn)\n\nDump all know session if no session id is provided.\n\n```js\nhaproxy.session(function (err, sess) {\n  // wooop\n});\n```\n\n### HAProxy.stat(id, type, id, fn)\n\nDump all statistics, if you want everything, supply -1 for all values.\n\n```js\nhaproxy.stat('-1', '-1', '-1', function () {\n\n});\n```\n\n### License\n\nMIT:\n\nCopyright (c) 2013 Observe.it (http://observe.it) opensource@observe.it\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/observing/haproxy/issues"
  },
  "homepage": "https://github.com/observing/haproxy",
  "_id": "haproxy@0.0.4",
  "dist": {
    "shasum": "b73b2fd1a27893c585184219a824a306e0d16497"
  },
  "_from": "haproxy@",
  "_resolved": "https://registry.npmjs.org/haproxy/-/haproxy-0.0.4.tgz"
}
